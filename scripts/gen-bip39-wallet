#!/usr/bin/env python
from mnemonic import Mnemonic
from binascii import hexlify
from pycoin.key.BIP32Node import BIP32Node
from pycoin.key.key_from_text import key_from_text
from pycoin.networks.all import BUILT_IN_NETWORKS
import json

def gen_wallet(mnemonic=None, passphrase=""):
    if not mnemonic:
        mnemonic = Mnemonic('english').generate(256)
    seed = Mnemonic.to_seed(mnemonic, passphrase = passphrase)
    data = {
        'mnemonic': str(mnemonic),
        'passphrase': str(passphrase),
        'seed': str(hexlify(seed),'utf-8'),
        'networks': {}
    }
    for network in BUILT_IN_NETWORKS:
        node = BIP32Node.from_master_secret(seed, network.code)
        bip44_account = node.subkey_for_path(r"44'/0'/0'")
        bip32_account = node.subkey_for_path(r"44'/0'/0'/0")
        data['networks'][network.code] = {
            "root_key": str(node.hwif(as_private=True)),
            "extended_public_key":
                bip32_account.wallet_key(as_private=False),
            "extended_private_key":
                bip32_account.wallet_key(as_private=True),
            "account_extended_public_key":
                bip44_account.wallet_key(as_private=False),
            "account_extended_private_key":
                bip44_account.wallet_key(as_private=True),
            "addresses": []
        }
        for i in range(5):
            address = bip32_account.subkey(i)
            data['networks'][network.code]['addresses'].append({
                'address': address.bitcoin_address(),
                "private_key": address.wif(),
                "public_key": address.sec_as_hex(),
            })

    return data

if __name__ == "__main__":
    wallet = json.dumps(gen_wallet())
    print(wallet)
